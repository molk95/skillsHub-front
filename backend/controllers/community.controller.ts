import { Request, Response } from 'express';
import communityService from '../services/community.service';

export class CommunityController {
  /**
   * Cr√©e une nouvelle communaut√©
   */
  async createCommunity(req: Request, res: Response): Promise<void> {
    try {
      console.log("Creating community with data:", req.body);

      // Commentez temporairement la v√©rification d'authentification pour les tests
      /*
      if (!req.user) {
        res.status(401).json({
          success: false,
          message: 'Utilisateur non authentifi√©'
        });
        return;
      }
      */

      const communityData = req.body;

      // Utilisez un ID de cr√©ateur par d√©faut pour les tests
      communityData.creator = "64f8b8e55a1c9b1c5e8b4567"; // Utilisez un ID valide de votre base de donn√©es

      const community = await communityService.createCommunity(communityData);
      console.log("Community created:", community);

      res.status(201).json({
        success: true,
        data: community
      });
    } catch (error: any) {
      console.error("Error creating community:", error);
      res.status(400).json({
        success: false,
        message: error.message || 'Erreur lors de la cr√©ation de la communaut√©'
      });
    }
  }

  /**
   * Cr√©e une nouvelle communaut√©
   */
  async createCommunity(req: Request, res: Response): Promise<void> {
    try {
      console.log('=== CR√âATION COMMUNAUT√â BACKEND ===');
      console.log('Donn√©es re√ßues:', req.body);
      console.log('Nom:', req.body.name);
      console.log('Description:', req.body.description);

      const communityData = {
        name: req.body.name,
        description: req.body.description,
        creator: req.body.creator || '64f8b8e55a1c9b1c5e8b4567' // ID par d√©faut pour les tests
      };

      console.log('Donn√©es √† sauvegarder:', communityData);

      const community = await communityService.createCommunity(communityData);

      console.log('=== COMMUNAUT√â CR√â√âE BACKEND ===');
      console.log('Communaut√© sauvegard√©e:', community);
      console.log('Description sauvegard√©e:', community.description);

      res.status(201).json({
        success: true,
        data: community
      });
    } catch (error: any) {
      console.error('‚ùå Erreur cr√©ation communaut√©:', error);
      res.status(400).json({
        success: false,
        message: error.message || 'Erreur lors de la cr√©ation de la communaut√©'
      });
    }
  }

  /**
   * R√©cup√®re toutes les communaut√©s
   */
  async getAllCommunities(req: Request, res: Response): Promise<void> {
    try {
      const limit = parseInt(req.query.limit as string) || 10;
      const skip = parseInt(req.query.skip as string) || 0;

      const communities = await communityService.getAllCommunities({}, limit, skip);

      console.log('=== COMMUNAUT√âS R√âCUP√âR√âES BACKEND ===');
      console.log(`Nombre de communaut√©s: ${communities.length}`);
      if (communities.length > 0) {
        console.log('Premi√®re communaut√©:', communities[0].name);
        console.log('Description premi√®re:', communities[0].description);
      }

      res.status(200).json({
        success: true,
        count: communities.length,
        data: communities
      });
    } catch (error: any) {
      res.status(500).json({
        success: false,
        message: error.message || 'Erreur lors de la r√©cup√©ration des communaut√©s'
      });
    }
  }

  /**
   * R√©cup√®re une communaut√© par son ID
   */
  async getCommunityById(req: Request, res: Response): Promise<void> {
    try {
      const community = await communityService.getCommunityById(req.params.id);

      if (!community) {
        res.status(404).json({
          success: false,
          message: 'Communaut√© non trouv√©e'
        });
        return;
      }

      res.status(200).json({
        success: true,
        data: community
      });
    } catch (error: any) {
      res.status(500).json({
        success: false,
        message: error.message || 'Erreur lors de la r√©cup√©ration de la communaut√©'
      });
    }
  }

  /**
   * Met √† jour une communaut√©
   */
  async updateCommunity(req: Request, res: Response): Promise<void> {
    try {
      const community = await communityService.updateCommunity(req.params.id, req.body);

      if (!community) {
        res.status(404).json({
          success: false,
          message: 'Communaut√© non trouv√©e'
        });
        return;
      }

      res.status(200).json({
        success: true,
        data: community
      });
    } catch (error: any) {
      res.status(400).json({
        success: false,
        message: error.message || 'Erreur lors de la mise √† jour de la communaut√©'
      });
    }
  }

  /**
   * Supprime une communaut√©
   */
  async deleteCommunity(req: Request, res: Response): Promise<void> {
    try {
      const community = await communityService.deleteCommunity(req.params.id);

      if (!community) {
        res.status(404).json({
          success: false,
          message: 'Communaut√© non trouv√©e'
        });
        return;
      }

      res.status(200).json({
        success: true,
        message: 'Communaut√© supprim√©e avec succ√®s'
      });
    } catch (error: any) {
      res.status(500).json({
        success: false,
        message: error.message || 'Erreur lors de la suppression de la communaut√©'
      });
    }
  }

  /**
   * Ajoute un membre √† une communaut√©
   */
  async addMember(req: Request, res: Response): Promise<void> {
    try {
      const { communityId, userId } = req.params;
      console.log(`Adding member ${userId} to community ${communityId}`);

      if (!userId) {
        res.status(400).json({
          success: false,
          message: 'ID utilisateur manquant'
        });
        return;
      }

      const community = await communityService.addMemberToCommunity(communityId, userId);

      if (!community) {
        res.status(404).json({
          success: false,
          message: 'Communaut√© non trouv√©e'
        });
        return;
      }

      res.status(200).json({
        success: true,
        data: community
      });
    } catch (error: any) {
      res.status(400).json({
        success: false,
        message: error.message || 'Erreur lors de l\'ajout du membre'
      });
    }
  }

  /**
   * Retire un membre d'une communaut√©
   */
  async removeMember(req: Request, res: Response): Promise<void> {
    try {
      const { communityId, userId } = req.params;

      const community = await communityService.removeMemberFromCommunity(communityId, userId);

      if (!community) {
        res.status(404).json({
          success: false,
          message: 'Communaut√© non trouv√©e'
        });
        return;
      }

      res.status(200).json({
        success: true,
        data: community
      });
    } catch (error: any) {
      res.status(400).json({
        success: false,
        message: error.message || 'Erreur lors du retrait du membre'
      });
    }
  }

  /**
   * V√©rifie si un utilisateur est membre d'une communaut√©
   */
  async checkMembership(req: Request, res: Response): Promise<void> {
    try {
      const { communityId, userId } = req.params;

      const isMember = await communityService.isUserMemberOfCommunity(communityId, userId);

      res.status(200).json({
        success: true,
        data: isMember
      });
    } catch (error: any) {
      res.status(400).json({
        success: false,
        message: error.message || 'Erreur lors de la v√©rification du statut de membre'
      });
    }
  }

  /**
   * Recherche des communaut√©s
   */
  async searchCommunities(req: Request, res: Response): Promise<void> {
    try {
      const query = req.query.q as string;

      if (!query) {
        res.status(400).json({
          success: false,
          message: 'Param√®tre de recherche requis'
        });
        return;
      }

      const communities = await communityService.searchCommunities(query);

      res.status(200).json({
        success: true,
        count: communities.length,
        data: communities
      });
    } catch (error: any) {
      res.status(500).json({
        success: false,
        message: error.message || 'Erreur lors de la recherche de communaut√©s'
      });
    }
  }

  /**
   * Ajoute des descriptions aux communaut√©s qui n'en ont pas
   */
  async addDescriptions(req: Request, res: Response): Promise<void> {
    try {
      console.log('üîß Ajout de descriptions aux communaut√©s...');

      const defaultDescriptions = [
        "Une communaut√© dynamique o√π les membres partagent leurs connaissances et exp√©riences.",
        "Rejoignez-nous pour apprendre, partager et grandir ensemble dans un environnement bienveillant.",
        "Espace d'√©change et de collaboration pour tous les passionn√©s de notre domaine.",
        "Communaut√© active d√©di√©e au partage de comp√©tences et √† l'entraide mutuelle.",
        "Un lieu de rencontre virtuel pour √©changer, apprendre et d√©velopper ses comp√©tences.",
        "Communaut√© engag√©e dans le d√©veloppement personnel et professionnel de ses membres.",
        "Plateforme collaborative pour partager des id√©es, des projets et des opportunit√©s.",
        "Espace convivial pour networker et d√©velopper ses comp√©tences avec d'autres passionn√©s."
      ];

      // Trouver toutes les communaut√©s sans description
      const communitiesWithoutDescription = await communityService.getCommunitiesWithoutDescription();

      if (communitiesWithoutDescription.length === 0) {
        res.status(200).json({
          success: true,
          message: 'Toutes les communaut√©s ont d√©j√† une description',
          updated: 0
        });
        return;
      }

      let updatedCount = 0;
      for (const community of communitiesWithoutDescription) {
        const randomDescription = defaultDescriptions[Math.floor(Math.random() * defaultDescriptions.length)];

        await communityService.updateCommunity(community._id.toString(), {
          description: randomDescription
        });

        updatedCount++;
        console.log(`‚úÖ Mis √† jour: "${community.name}"`);
      }

      res.status(200).json({
        success: true,
        message: `${updatedCount} communaut√©s mises √† jour avec des descriptions`,
        updated: updatedCount
      });
    } catch (error: any) {
      console.error('‚ùå Erreur lors de l\'ajout des descriptions:', error);
      res.status(500).json({
        success: false,
        message: error.message || 'Erreur lors de l\'ajout des descriptions'
      });
    }
  }
}

export default new CommunityController();








