const mongoose = require('mongoose');

// Configuration MongoDB
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/skillshub';

// Descriptions par d√©faut
const descriptions = [
  "Une communaut√© dynamique o√π les membres partagent leurs connaissances et exp√©riences.",
  "Rejoignez-nous pour apprendre, partager et grandir ensemble dans un environnement bienveillant.",
  "Espace d'√©change et de collaboration pour tous les passionn√©s de notre domaine.",
  "Communaut√© active d√©di√©e au partage de comp√©tences et √† l'entraide mutuelle.",
  "Un lieu de rencontre virtuel pour √©changer, apprendre et d√©velopper ses comp√©tences.",
  "Communaut√© engag√©e dans le d√©veloppement personnel et professionnel de ses membres."
];

async function fixDescriptions() {
  try {
    console.log('üîó Connexion √† MongoDB...');
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connect√© √† MongoDB');

    // Utiliser directement la collection MongoDB
    const db = mongoose.connection.db;
    const collection = db.collection('communities');

    // Trouver toutes les communaut√©s sans description
    console.log('üîç Recherche des communaut√©s sans description...');
    const communitiesWithoutDescription = await collection.find({
      $or: [
        { description: { $exists: false } },
        { description: null },
        { description: '' }
      ]
    }).toArray();

    console.log(`üìä Trouv√© ${communitiesWithoutDescription.length} communaut√©s sans description`);

    if (communitiesWithoutDescription.length === 0) {
      console.log('‚úÖ Toutes les communaut√©s ont d√©j√† une description !');
      return;
    }

    // Mettre √† jour chaque communaut√©
    let updatedCount = 0;
    for (const community of communitiesWithoutDescription) {
      const randomDescription = descriptions[Math.floor(Math.random() * descriptions.length)];
      
      await collection.updateOne(
        { _id: community._id },
        { 
          $set: { 
            description: randomDescription,
            updatedAt: new Date()
          } 
        }
      );

      updatedCount++;
      console.log(`‚úÖ Mis √† jour: "${community.name}" -> "${randomDescription.substring(0, 50)}..."`);
    }

    console.log(`üéâ Termin√© ! ${updatedCount} communaut√©s mises √† jour avec des descriptions.`);

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connect√© de MongoDB');
  }
}

// Ex√©cuter le script
if (require.main === module) {
  fixDescriptions()
    .then(() => {
      console.log('‚úÖ Script termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erreur lors de l\'ex√©cution du script:', error);
      process.exit(1);
    });
}

module.exports = { fixDescriptions };
